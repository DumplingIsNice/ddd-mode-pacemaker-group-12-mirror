#resource "timing.h"
#hostcode-c "#include \"timing.h\""
#hostcode-c "#include <stdio.h>"

scchart FSM_Rev4 {
  
  input signal    VS, AS   // external
  output signal    VP, AP  // internal
  
  bool  PVARP_Elapsed = false, VRP_Elapsed = false
  bool  AEI_Elapsed = false, AVI_Elapsed = false
  bool  URI_Elapsed = false, LRI_Elapsed = false
  
  // Hence, a definable value is declared here to create an interact-able struct field
  
  // Hardcoded config values
  float globalDeltaT = 1
//  float PVARP_CONFIG = 8, VRP_CONFIG = 8
//  float AEI_CONFIG = 6, AVI_CONFIG = 4
//  float URI_CONFIG = 12, LRI_CONFIG = 16
  
  /* Config from "timing.h" */
  host "int" AVI_CONFIG     = `AVI_VALUE`
  host "int" AEI_CONFIG     = `AEI_VALUE`
  host "int" PVARP_CONFIG   = `PVARP_VALUE`
  host "int" VRP_CONFIG     = `VRP_VALUE`
  host "int" LRI_CONFIG     = `LRI_VALUE`
  host "int" URI_CONFIG     = `URI_VALUE`
  
  
  // Region used for organization purpose
  region timers {
    
    // PVARP - Post any V event, ignore any A event
    region PVARP {
      clock     tPVARP  = 0
      const int T_PVARP = PVARP_CONFIG
      
      /* On Boot:
       * - AEI, AVI reset and counting.
       * - RI timer reset and counting.
       * - Cannot know if there is VS, AS event before boot.
       *    - Assume there WAS VS, AS event prior to boot.
       *    - Hence, boot with Refractory Period.
       */ 
      
      initial state CountingPostVS {
        entry do tPVARP = 0; PVARP_Elapsed = false
      }
      if tPVARP >= T_PVARP go to Elapsed
      
      state CountingPostVP {
        entry do tPVARP = globalDeltaT; PVARP_Elapsed = false
      }
      if tPVARP >= T_PVARP go to Elapsed
      
      state Elapsed {
        entry do PVARP_Elapsed = true
      }
      if (VS) go to CountingPostVS
      if (pre(VP)) go to CountingPostVP
    }
    
    // VARP - Post any V event, ignore any V event
    region VRP {
      clock     tVRP  = 0
      const int T_VRP = VRP_CONFIG
      
      initial state CountingPostVS {
        entry do tVRP = 0; VRP_Elapsed = false
      }
      if tVRP >= T_VRP go to Elapsed
      
      state CountingPostVP {
        entry do tVRP = globalDeltaT; VRP_Elapsed = false
      }
      if tVRP >= T_VRP go to Elapsed
      
      state Elapsed {
        entry do VRP_Elapsed = true
      }
      if (VS) go to CountingPostVS
      if (pre(VP)) go to CountingPostVP
    }
  
  // AEI - When elapsed, must generate AP
  // Resets on any V event.
  region rAEI {
      clock tAEI        = 0
      const int T_AEI   = AEI_CONFIG
      
      initial state Start {
        entry do tAEI = globalDeltaT; AEI_Elapsed = false
      }
      if AS && PVARP_Elapsed go to Finished
      if tAEI >= T_AEI go to Elapsed
      
      state Elapsed {
        entry do AEI_Elapsed = true
      }
      /**
       * one tick delay
       */
      if AEI_Elapsed == true go to Finished
      
      state Finished {
        entry do AEI_Elapsed = false
      }
      if (VS||VP) && pre(VRP_Elapsed) go to Start
    }
    

    // AVI - When elapsed, must generate VP
    // Resets on any A event.    
    region rAVI {
      initial state sAVI {
        clock tAVI      = 0
        const int T_AVI = AVI_CONFIG
        
        initial state Counting {
          entry do tAVI = globalDeltaT; AVI_Elapsed = false
        }
        if tAVI >= T_AVI go to Elapsed
        
        state Elapsed {
          entry do AVI_Elapsed = true
        }

      }
      
      // Must use previous value - VP resets RP timers.
      // Similar logic to pre() in AVI, AEI and RI timer.
      if ((AS||pre(AP)) && pre(PVARP_Elapsed)) abort to sAVI
    }
  
    // Combined LRI, URI region.
    // URI - Until elapsed, do not allow generation of VP.
    // LRI - When elapsed, must generate VP.
    region rRI {
      initial state sRI {
        clock tRI       = 0
        const int T_URI = URI_CONFIG
        const int T_LRI = LRI_CONFIG
        //
        initial state Start {
          entry do tRI = globalDeltaT; URI_Elapsed = false; LRI_Elapsed = false
        }
        if tRI >= T_URI go to URI_Fin
        
        state URI_Fin {
          entry do URI_Elapsed = true
        }
        if tRI >= T_LRI go to LRI_Fin
        //
        state LRI_Fin {
          entry do LRI_Elapsed = true
        }
      }
      
      // Must use previous value - VP resets RP timers.
      // Similar logic to pre() in AVI, AEI and RI timer.      
      if ((VS||pre(VP)) && pre(VRP_Elapsed)) abort to sRI
     }
   }

   // V_Pulse Generator.
   // Consumer of timer control signal.
   // Drives A_Pulse.
   region VP_GEN {
      initial state Ready_V {
      }
      if (LRI_Elapsed) go to Pace_VP
      if (URI_Elapsed && AVI_Elapsed) go to Pace_VP

      state Pace_VP {
        entry do VP
      }
      immediate go to Ready_V
   }
   
   // A_Pulse Generator.
   // Consumer of timer control signal
   // Driven by V_Pulse.
   region AP_GEN {
    initial state Ready_A {
    }
    if (AEI_Elapsed) go to Pace_AP
    //
    state Pace_AP {
      entry do AP
    }
    immediate go to Ready_A
  }
}