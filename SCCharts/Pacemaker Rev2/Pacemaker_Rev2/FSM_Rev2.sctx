scchart Pacemaker_FMS {
  
  /*
   * This version of our logic was designed from a synchronous hardware
   * perspective, more suitable for FPGA. As a result we encountered
   * issues attempting to convert our combinational logic into
   * sequentially constructed logic.
   * 
   * Many of these issues involved our timer logic and the use of reset
   * (strong abort) transitions.
   * 
   * The tick delay introduced by our use of pre() to attempt to get around
   * scheduling issues created impractical and potentially unacceptable
   * delays, wherein the VRP_Elapsed and AVRP_Elapsed values viewed by the
   * model would always be one tick behind their actual values.
   * 
   * This would cause refractory signals VR and AR to be accepted as VS or
   * AS signals in the case that they occurred a tick after the actual VS
   * or AS signals. While in practice a maximum delay of 2 ticks between
   * the ideal signal output and the model signal output would not be a
   * critical issue given an appropriately small tick period, this would
   * be a cause for concern for future revisions involving different tick
   * periods or dynamic tick logic.
   * 
   * Similarly, a VR or AR being registered as VS or AS currently does not
   * have implications beyond re-triggering strong abort transitions (and
   * introducing a one tick inaccuracy) but could become a major issue if
   * related logic or timing were to change in the future.
   * 
   * These issues are addressed in the next revision, 'FSM_Rev3.sctx'.
   * 
   */
  
  

input signal    VS, AS  // external
output signal    VP, AP  // internal

bool  PVARP_Elapsed = false, VRP_Elapsed = false
bool  AEI_Elapsed = false, AVI_Elapsed = false
bool  URI_Elapsed = false, LRI_Elapsed = false

/**
       * NOTE: Is pre() okay?
       * Potential edge case where VS||VP is detected in the tick XX_Elapses, but does not register
       * (due to the bool XX_Elapsed not having updated).
       * 
       * If we have fixed ticks we could decrease the T_XX value by one tick to account for the tick
       * delay introduced by pre().
       */
       
  /* TIMERS */
  region Timers {        
    /*
     * === OUTDATED: REPLACED BY 1-LEVEL FSM MODEL IN FSM_REV3.sctx ===
     * 
     * Reliance on the strong abort transition in a higher-state resulted in
     * sequential ordering challenges due to the lower-state FSM attempting
     * to emit a value (XX_Elapsed), which also needed to be read by the
     * strong abort's conditional transition logic.
     * Due to the strong abort needing to be evaluated first, but all write
     * instructions needing to occur before read instructions, a scheduling
     * error arose. 
     */
    
    region rPVARP {
      initial state sPVARP {
        clock tPVARP          = 0
        const int   T_PVARP   = 10
        // 
        initial state Counting {
          entry do tPVARP = 0; PVARP_Elapsed = false
        }
        if tPVARP >= T_PVARP go to Elapsed
        // 
        final state Elapsed {
          entry do PVARP_Elapsed = true
        }
      }
      if ((VS||VP) && pre(PVARP_Elapsed)) abort to sPVARP
    }
    
    region rVRP {
      initial state sVRP {
        clock tVRP            = 0
        const int   T_VRP     = 6
        //
        initial state Counting {
          entry do tVRP = 0; VRP_Elapsed = false
        }
        if tVRP >= T_VRP go to Elapsed
        //
        final state Elapsed {
          entry do VRP_Elapsed = true
        }
      }
      if ((VS||VP) && pre(VRP_Elapsed)) abort to sVRP
    }
    
    region rAEI {
      initial state sAEI {
        clock tAEI        = 0
        const int T_AEI   = 6
        //
        initial state Counting {
          entry do tAEI = 0; AEI_Elapsed = false
        }
        if tAEI >= T_AEI go to Elapsed
        //
        final state Elapsed {
          entry do AEI_Elapsed = true
        }
      }
      if ((VS||VP) && pre(VRP_Elapsed)) abort to sAEI
    }
    
    region rAVI {
      initial state sAVI {
        clock tAVI      = 0
        const int T_AVI = 4
        //
        initial state Counting {
          entry do tAVI = 0; AVI_Elapsed = false
        }
        if tAVI >= T_AVI go to Elapsed
        //
        final state Elapsed {
          entry do AVI_Elapsed = true
        }
      }
      if ((AS||AP) && pre(PVARP_Elapsed)) abort to sAVI
    }
    
    region rRI {
      initial state sRI {
        clock tRI       = 0
        const int T_URI = 12
        const int T_LRI = 16
        //
        initial state Start {
          entry do tRI = 0; URI_Elapsed = false; LRI_Elapsed = false
        }
        if tRI >= T_URI go to URI_Fin
        //
        state URI_Fin {
          entry do URI_Elapsed = true
        }
        if tRI >= T_LRI go to LRI_Fin
        //
        state LRI_Fin {
          entry do LRI_Elapsed = true
        }
      }
      if ((VS||VP) && pre(VRP_Elapsed)) abort to sRI
    }
  }
  
  /*
   * === RESOLVED IN FSM_Rev3.sctx ===
   * 
   * TODO:
   * !Fix compilation issue due to sequential ordering!
   * Currently we are writing to VP inside of the VP state-machine, which is run in parallel with the timers.
   * VP is dependent on reading pre(VRP_Elapsed). However, VRP_Elapsed is dependent on reading VP.
   * Thus we have a sequential scheduling issue.
   * 
   * To resolve this we either need to use a combination of pre() (bad! no more tick delays!) or rearrange the
   * dependencies to resolve all writes before reading.
   */
  /* VP */
  region VP {
    initial state sVP {
      //
      initial state Detect_VS {
      }
      if (LRI_Elapsed) go to Pace_VP
      if (AVI_Elapsed && URI_Elapsed) go to Pace_VP
      //
      state Pace_VP {
        entry do VP
      }
      immediate go to Detect_VS
    }
    /**
     * pre() of VRP_Elapsed doesn't actually need to be used here, as it
     * is read only. However, upstream the future value of VRP_Elapsed is
     * decided by pre(VRP_Elapsed). Thus we use it here for clarity.
     * Adding or removing pre() here should have no change.
     */
    if (VS && pre(VRP_Elapsed)) abort to sVP
  }
  
  /* AP */
  region AP {
    initial state sAP {
      //
      initial state Detect_AS {
      }
      if (AEI_Elapsed) go to Pace_AP
      //
      state Pace_AP {
        entry do AP
      }
      immediate go to Detect_AS
    }
    if (AS && pre(PVARP_Elapsed)) abort to sAP
  }
}
