scchart Pacemaker_FMS {

input signal    VS, AS  // external
output signal    VP, AP  // internal

bool  PVARP_Elapsed = false, VRP_Elapsed = false
bool  AEI_Elapsed = false, AVI_Elapsed = false
bool  URI_Elapsed = false, LRI_Elapsed = false

float myDeltaT

       
  /* TIMERS */
  region Timers {    
    region PVARP {
      clock     tPVARP  = 0
      const int T_PVARP = 10
      
      initial state CountingPostVS {
        entry do tPVARP = 0; PVARP_Elapsed = false
      }
      if tPVARP >= T_PVARP go to Elapsed
      
      state CountingPostVP {
        entry do tPVARP = myDeltaT; PVARP_Elapsed = false
      }
      if tPVARP >= T_PVARP go to Elapsed
      
      state Elapsed {
        entry do PVARP_Elapsed = true
      }
      if (VS) go to CountingPostVS
      if (pre(VP)) go to CountingPostVP
    }
    
    region VRP {
      clock     tVRP  = 0
      const int T_VRP = 10
      
      initial state CountingPostVS {
        entry do tVRP = 0; VRP_Elapsed = false
      }
      if tVRP >= T_VRP go to Elapsed
      
      state CountingPostVP {
        entry do tVRP = myDeltaT; VRP_Elapsed = false
      }
      if tVRP >= T_VRP go to Elapsed
      
      state Elapsed {
        entry do VRP_Elapsed = true
      }
      if (VS) go to CountingPostVS
      if (pre(VP)) go to CountingPostVP
    }
    
    region rAEI {
      initial state sAEI {
        clock tAEI        = 0
        const int T_AEI   = 6
        
        initial state Counting {
          entry do tAEI = 0; AEI_Elapsed = false
        }
        immediate if pre(VP) go to CountingPostVP
        if tAEI >= T_AEI go to Elapsed
        
        state CountingPostVP {
          entry do tAEI = myDeltaT
        }
        if tAEI >= T_AEI go to Elapsed
        
        final state Elapsed {
          entry do AEI_Elapsed = true
        }
      }
      if ((VS||pre(VP)) && VRP_Elapsed) abort to sAEI
    }
    
    region rAVI {
      initial state sAVI {
        clock tAVI      = 0
        const int T_AVI = 4
        
        initial state Counting {
          entry do tAVI = 0; AVI_Elapsed = false
        }
        immediate if pre(AP) go to CountingPostVP
        if tAVI >= T_AVI go to Elapsed
        
        state CountingPostVP {
          entry do tAVI = myDeltaT
        }
        if tAVI >= T_AVI go to Elapsed
        
        final state Elapsed {
          entry do AVI_Elapsed = true
        }
      }
      if ((AS||pre(AP)) && PVARP_Elapsed) abort to sAVI
    }
    
    region rRI {
      initial state sRI {
        clock tRI       = 0
        const int T_URI = 12
        const int T_LRI = 16
        //
        initial state Start {
          entry do tRI = 0; URI_Elapsed = false; LRI_Elapsed = false
        }
        immediate if pre(VP) go to StartPostVP
        if tRI >= T_URI go to URI_Fin
        
        state StartPostVP {
          entry do tRI = myDeltaT
        }
        if tRI >= T_URI go to URI_Fin
        
        state URI_Fin {
          entry do URI_Elapsed = true
        }
        if tRI >= T_LRI go to LRI_Fin
        //
        state LRI_Fin {
          entry do LRI_Elapsed = true
        }
      }
      if ((VS||pre(VP)) && VRP_Elapsed) abort to sRI
    }
  }
  
  /* VP */
  region VP {
    initial state sVP {
      //
      initial state Detect_VS {
      }
      if (LRI_Elapsed) go to Pace_VP
      if (AVI_Elapsed && URI_Elapsed) go to Pace_VP
      //
      state Pace_VP {
        entry do VP
      }
      immediate go to Detect_VS
    }
    if (VS && VRP_Elapsed) abort to sVP
  }
  
  /* AP */
  region AP {
    initial state sAP {
      //
      initial state Detect_AS {
      }
      if (AEI_Elapsed) go to Pace_AP
      //
      state Pace_AP {
        entry do AP
      }
      immediate go to Detect_AS
    }
    if (AS && PVARP_Elapsed) abort to sAP
  }
}
